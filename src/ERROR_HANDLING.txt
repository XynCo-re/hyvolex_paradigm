# Error Handling Guidelines

## Core Principles

1. Use the centralized `ErrorManager` for all error handling
2. Never return `Result` from Bevy systems
3. Keep all error types in `src/err.rs`
4. Use error logging with appropriate context

## Error File Structure

❌ **INCORRECT**: Creating separate error directories or type files
```
src/
  err/
    mod.rs
    types.rs
```

✅ **CORRECT**: Single centralized error file
```
src/
  err.rs  // All error types and handling in one file
```

## Bevy System Error Handling

❌ **INCORRECT**: Returning Result from systems
```rust
fn my_system() -> Result<(), Error> {
    // System logic
}
```

✅ **CORRECT**: Using ErrorManager
```rust
fn my_system(error_manager: Res<ErrorManager>) {
    if let Err(e) = some_fallible_operation() {
        error_manager.report_error(e);
    }
}
```

## Error Type Usage

❌ **INCORRECT**: Looking for types in `err/types.rs`
```rust
use crate::err::types::Error;  // Wrong path
```

✅ **CORRECT**: Finding types in `err.rs`
```rust
use crate::err::Error;  // Correct path
```

## Error Handling Best Practices

1. Use appropriate error variants:
   - `ComponentError` for component-related errors
   - `ResourceError` for resource-related errors
   - `SystemError` for system-related errors

2. Provide clear error messages:
```rust
error_manager.report_error(Error::Component(ComponentError::NotFound(
    format!("Component {} not found", component_name)
)));
```

3. Use error recovery where possible:
```rust
error_manager.report_with_recovery(
    error,
    "Falling back to default configuration"
);
```

4. Use the ErrorExt trait for convenient error handling:
```rust
some_fallible_operation().log_to_manager(&error_manager);
```

## Error Checking System

The error checking system runs periodically to:
1. Check for accumulated errors
2. Log unhandled errors
3. Clear handled errors

Configure it in your plugin:
```rust
app.add_systems(Update, error_check_system.in_set(HyvoGridSet::ErrorHandling));
```

## Common Error Patterns

1. Component Not Found:
```rust
ComponentError::NotFound(entity.to_string())
```

2. Resource Initialization:
```rust
ResourceError::InitFailed("Failed to initialize config".to_string())
```

3. System Execution:
```rust
SystemError::ExecutionFailed("Invalid state transition".to_string())
```

4. Custom Errors:
```rust
Error::custom("Unexpected operation failure")
```

## Error Recovery Strategies

1. Use fallback values:
```rust
if let Err(e) = primary_operation() {
    error_manager.report_with_recovery(e, "Using fallback value");
    fallback_operation();
}
```

2. Retry operations:
```rust
let mut attempts = 0;
while attempts < MAX_ATTEMPTS {
    match operation() {
        Ok(result) => return result,
        Err(e) => {
            error_manager.report_error(e);
            attempts += 1;
        }
    }
}
```

3. Graceful degradation:
```rust
if let Err(e) = full_featured_operation() {
    error_manager.report_with_recovery(e, "Falling back to basic mode");
    basic_operation();
}
``` 